
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE0_CV_RF_v2(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	inout 		          		CLOCK4_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,
	input 		          		RESET_N,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// microSD Card //////////
	output		          		SD_CLK,
	inout 		          		SD_CMD,
	inout 		     [3:0]		SD_DATA,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
// MNISTの手書き画像
wire [783:0] test0;
assign test0 = 784'b
wire [783:0] test1;
assign test1 = 784'b
wire [783:0] test2;
assign test2 = 784'b

// 入力データ選択
wire [783:0] rf_input;
assign rf_input =
  SW[3:0] == 4'b0000 ? test0 :
  SW[3:0] == 4'b0001 ? test1 : test2;

// 正解ラベル選択
wire [3:0] actual;
assign actual =
  SW[3:0] == 4'b0000 ? 7 :
  SW[3:0] == 4'b0001 ? 2 :
  SW[3:0] == 4'b0010 ? 1 :
  SW[3:0] == 4'b0011 ? 0 :
  SW[3:0] == 4'b0100 ? 4 :
  SW[3:0] == 4'b0101 ? 1 :
  SW[3:0] == 4'b0110 ? 4 : 9;

wire [3:0] rf_output;


//=======================================================
//  Structural coding
//=======================================================
mnist_rf_pipeline rf(KEY[0], ~RESET_N, rf_input, rf_output);

// 7セグデコーダ
function [6:0] dec_to_7seg;
  input [3:0] dec;
  dec_to_7seg = dec == 0 ? ~7'b0111111 :
                dec == 1 ? ~7'b0000110 :
                dec == 2 ? ~7'b1011011 :
                dec == 3 ? ~7'b1001111 :
                dec == 4 ? ~7'b1100110 :
					 dec == 5 ? ~7'b1101101 :
					 dec == 6 ? ~7'b1111101 :
					 dec == 7 ? ~7'b0100111 :
					 dec == 8 ? ~7'b1111111 :
					 dec == 9 ? ~7'b1101111 :
                7'bxxxxxxx;
endfunction

// 7セグに出力
assign LEDR[3:0] = SW[3:0];
assign HEX0 = dec_to_7seg(rf_output);
assign HEX1 = 7'b1111111;
assign HEX2 = dec_to_7seg(actual);
assign HEX3 = 7'b1111111;
assign HEX4 = 7'b1111111;
assign HEX5 = 7'b1111111;


endmodule
